# Скрипт линкера настраивается в port
#-------------------------------------------------------------------------------
LDSCR_PATH := 
LDSCRIPT   := 

# Исходный код для сборки HAL 
#-------------------------------------------------------------------------------
HAL_SRC:=
HAL_INC:=

# Исходный код для сборки PORT 
#-------------------------------------------------------------------------------
PORT_SRC:=
PORT_INC:=

# Исходный код для сборки ОС 
#-------------------------------------------------------------------------------
CORE_SRC:=
CORE_INC:=

# Включение файлов сборки проекта 
#-------------------------------------------------------------------------------
include $(NEOS_DIR)/os/neos.mk

# Список объектных файлов
#-------------------------------------------------------------------------------

OBJS += ${PORT_SRC} 	
OBJS += ${CORE_SRC} 
OBJS += ${APP_SRC} 
OBJS := ${OBJS:.c=.o}
OBJS := ${OBJS:.s=.o}

# Инструменты
#-------------------------------------------------------------------------------
AS = arm-none-eabi-as
CC = arm-none-eabi-gcc
LD = arm-none-eabi-gcc
CP = arm-none-eabi-objcopy
SZ = arm-none-eabi-size
RM = rm
  
EXE_DIR = $(NEOS_DIR)/bin

# Пути поиска заголовочных файлов
#-------------------------------------------------------------------------------
INCLUDES += $(PORT_INC)
INCLUDES += $(HAL_INC)
INCLUDES += $(CORE_INC)
INCLUDES += $(APP_INC)

# Библиотеки
#-------------------------------------------------------------------------------
LIBPATH +=
LIBS    +=

# Настройки оптимизации компилятора
#-------------------------------------------------------------------------------
DEFAULT_OPTIMIZATION += -Os

# Настройки компилятора
#-------------------------------------------------------------------------------
CFLAGS += -mthumb -mcpu=cortex-m3 # архитектура и система комманд
CFLAGS += -std=gnu99              # стандарт языка С
CFLAGS += -Wall -pedantic         # Выводить все предупреждения
CFLAGS += -ggdb                   # Генерировать отладочную информацию для gdb
CFLAGS += -fno-builtin
CFLAGS += -Wfatal-errors
CFLAGS += -ffunction-sections	  # Выбрасываем неиспользуемые функции
CFLAGS += -fdata-sections 		  # Выбрасываем неиспользуемые данные
CFLAGS += $(DEFAULT_OPTIMIZATION) 
CFLAGS += $(addprefix -I, $(INCLUDES))
CFLAGS += $(addprefix -D, $(DEFINES))

# Настройки линкера
#-------------------------------------------------------------------------------
LDFLAGS += -nostartfiles
LDFLAGS += -mthumb 
LDFLAGS += -specs=nosys.specs
LDFLAGS += -specs=nano.specs
#LDFLAGS += -u_printf_float
LDFLAGS += -Wl,--gc-sections   # /Не линкуем неиспользуемый код и данные
LDFLAGS += -L$(LDSCR_PATH)
LDFLAGS += -T$(LDSCR_PATH)/$(LDSCRIPT)
LDFLAGS += $(addprefix -L, $(LIBPATH))
LDFLAGS += $(LIBS)

# Настройки ассемблера
#-------------------------------------------------------------------------------
AFLAGS += -alh
AFLAGS += -mapcs-32

# Пути поиска make
#-------------------------------------------------------------------------------
#VPATH := $(SOURCEDIRS)

# Список файлов к удалению командой "make clean"
#-------------------------------------------------------------------------------
TOREMOVE += $(EXE_DIR)/$(TARGET).elf 
TOREMOVE += $(EXE_DIR)/$(TARGET).hex
TOREMOVE += $(OBJS)

# Собрать все
#-------------------------------------------------------------------------------
all: $(TARGET).hex size 

# Очистка
#-------------------------------------------------------------------------------
clean:
	@echo "Clean object files" 
	@$(RM) -f $(TOREMOVE)  

# Создание .hex файла
#-------------------------------------------------------------------------------
$(TARGET).hex: $(TARGET).elf
	@$(CP) -Oihex $(EXE_DIR)/$(TARGET).elf $(EXE_DIR)/$(TARGET).hex

# Показываем размер
#-------------------------------------------------------------------------------
size:
	@echo "---------------------------------------------------"
	@$(SZ) $(EXE_DIR)/$(TARGET).elf

# Линковка
#------------------------------------------------------------------------------- 
$(TARGET).elf: $(OBJS)
	@$(LD) $(LDFLAGS) $^ -o $(EXE_DIR)/$@

OPT = $(notdir $@)

# Компиляция
#------------------------------------------------------------------------------- 
%.o: %.c
	@echo "$<"
	@$(CC) $(CFLAGS) $($(notdir $@)) -c $< -o $@

%.o: %.s
	@echo "\e[1;34mBuilding $<\e[0m"
	@echo "OPTIMIZATION: $(AFLAGS)"
	@$(AS) $(AFLAGS) $($(notdir $@)) -c $< -o $@ > /dev/null

# Сгенерированные gcc зависимости
#-------------------------------------------------------------------------------
include $(wildcart *.d)
#@echo "CFLAGS: $(CFLAGS)"
#@echo "OPTIMIZATION: $($(notdir $@))"